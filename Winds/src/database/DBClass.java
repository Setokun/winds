package database;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javax.swing.JOptionPane;

public class DBClass{    
    
	private static Connection connection = null;
	private static Statement statement = null;
	
	/**
	 * open a connection with local database
	 * @return boolean
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public static boolean connect() throws ClassNotFoundException, SQLException{
		try {
    		Class.forName("org.hsqldb.jdbcDriver").newInstance();
		} catch (InstantiationException | IllegalAccessException e1) {
			JOptionPane.showMessageDialog(null, "impossible to find database drivers, please download the game again !");
      	  	System.exit(1);
		}

        try{
        	connection = DriverManager.getConnection("jdbc:hsqldb:file:winds", "sa",  "");
        }
        catch(Exception e){
        	JOptionPane.showMessageDialog(null, "impossible to access to local database !");
        	return false;
        }

		return true;
	}
	/**
	 * close the connection with local database
	 */
	public static void disconnect(){
		try {
			statement.executeQuery("SHUTDOWN");
			statement.close();
			if(!connection.isClosed())
				connection.close();
		} catch (SQLException e) {}
	}
	/**
	 * execute any sql query except SELECT 
	 * @param sql String
	 * @throws ClassNotFoundException
	 * @throws SQLException
	 */
	public static void executeQuery(String sql) throws ClassNotFoundException, SQLException{       
		if(connection.isClosed()) DBClass.connect();
		statement = connection.createStatement() ;
        statement.executeQuery(sql);
    }
    /**
     * execute a sql SELECT query 
     * @param sql
     * @return ResultSet
     * @throws ClassNotFoundException
     * @throws SQLException
     */
    public static ResultSet requestQuery(String sql) throws ClassNotFoundException, SQLException{       
        statement = connection.createStatement() ;
        ResultSet result = statement.executeQuery(sql);
        return result;
    }
    /**
     * determines if the SQL database exists
     * @return boolean
     */
    public static boolean existStructure(){
    	int nbEntries = 0;
    	try {
			DBClass.connect();
			ResultSet r = DBClass.requestQuery("SELECT * FROM resolutions");
			while(r.next()){
				nbEntries++;
			}
		} catch (ClassNotFoundException | SQLException e) {} finally {
			DBClass.disconnect();
		}
    	return (nbEntries > 0);
    }
    /**
     * create the structure of the Winds Game local database
     */
    public static void createStructures(){
    	try {
			DBClass.executeQuery("CREATE TABLE scores (idPlayer INT, idLevel INT, time INT, nbClicks INT, nbItems INT)");
			DBClass.executeQuery("ALTER TABLE scores ADD PRIMARY KEY (idPlayer, idLevel);");
			DBClass.executeQuery("CREATE TABLE levels (id INT PRIMARY KEY, name VARCHAR, description VARCHAR, timeMax INT, levelType VARCHAR, levelStatus VARCHAR, levelMode VARCHAR, creator VARCHAR, idTheme INT)");
			DBClass.executeQuery("CREATE TABLE themes (id INT PRIMARY KEY, name VARCHAR, description VARCHAR)");
			DBClass.executeQuery("CREATE TABLE users (id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 1) PRIMARY KEY, email VARCHAR, password VARCHAR, pseudo VARCHAR, userType VARCHAR, current BOOLEAN, resolution INT)");
			DBClass.executeQuery("CREATE TABLE resolutions (id INT GENERATED BY DEFAULT AS IDENTITY(START WITH 0) PRIMARY KEY, width INT, height INT)");
		} catch (ClassNotFoundException | SQLException e) {}
    }
    /**
     * insert the minimum data set to start the game
     */
    public static void createStartData(){
		try {
			DBClass.connect();
			DBClass.executeQuery("INSERT INTO resolutions (width, height) VALUES (640, 480);");
			DBClass.executeQuery("INSERT INTO resolutions (width, height) VALUES (800, 600);");
			DBClass.executeQuery("INSERT INTO resolutions (width, height) VALUES (1024, 600);");
			
		} catch (ClassNotFoundException | SQLException e) {
			JOptionPane.showMessageDialog(null, "impossible to access to local database !");
		} finally {
			DBClass.disconnect();
		}
	}
    
}
